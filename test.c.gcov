        -:    0:Source:test.c
        -:    0:Graph:test.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:#include <stdio.h>
        -:    2:
        -:    3:#define MATRIX_SIZE 6
        -:    4:#define MAX_SCALER 65536
        -:    5:
        -:    6://the well-conditioned matrix to be inverted
        -:    7:// line below for matlab debugging
        -:    8:// [1,2,1,1,2,1; 5, 2, 7, 1, 1, 3;7, 1, 1, 4, 1, 2;1, 1, 5, 2, 3, 7;1, 2, 5, 2, 2, 1;1, 2, 1, 1, 1, 2]
        -:    9:float well_conditioned_matrix[MATRIX_SIZE][MATRIX_SIZE] = 
        -:   10:{
        -:   11:    {1, 2, 1, 1, 2, 1},
        -:   12:    {5, 2, 7, 1, 1, 3},
        -:   13:    {7, 1, 1, 4, 1, 2},
        -:   14:    {1, 1, 5, 2, 3, 7},
        -:   15:    {1, 2, 5, 2, 2, 1},
        -:   16:    {1, 2, 1, 1, 1, 2}
        -:   17:};
        -:   18:
        -:   19://allocating memory and defining the identity matrix to have row operations completed on it for the inversion
        -:   20:float well_conditioned_inversion_result[MATRIX_SIZE][MATRIX_SIZE] = 
        -:   21:{
        -:   22:    {1, 0, 0, 0, 0, 0},
        -:   23:    {0, 1, 0, 0, 0, 0},
        -:   24:    {0, 0, 1, 0, 0, 0},
        -:   25:    {0, 0, 0, 1, 0, 0},
        -:   26:    {0, 0, 0, 0, 1, 0},
        -:   27:    {0, 0, 0, 0, 0, 1},
        -:   28:};
        -:   29:
        -:   30:float m_well[MATRIX_SIZE][MATRIX_SIZE] = 
        -:   31:{
        -:   32:    {5, 2, 1, 1, 2, 1},
        -:   33:    {5, 1, 7, 1, 1, 3},
        -:   34:    {7, 1, 7, 9, 1, 2},
        -:   35:    {1, 1, 5, 3, 3, 5},
        -:   36:    {1, 2, 5, 2, 2, 1},
        -:   37:    {1, 9, 0, 5, 1, 7}
        -:   38:};
        -:   39:
        -:   40:float m_well_result[MATRIX_SIZE][MATRIX_SIZE] = 
        -:   41:{
        -:   42:    {1, 0, 0, 0, 0, 0},
        -:   43:    {0, 1, 0, 0, 0, 0},
        -:   44:    {0, 0, 1, 0, 0, 0},
        -:   45:    {0, 0, 0, 1, 0, 0},
        -:   46:    {0, 0, 0, 0, 1, 0},
        -:   47:    {0, 0, 0, 0, 0, 1},
        -:   48:};
        -:   49:
        -:   50:float m_ill[MATRIX_SIZE][MATRIX_SIZE] = 
        -:   51:{
        -:   52:    {5, 5, 1, 1, 2, 1},
        -:   53:    {5, 1, 14, 1, 1, 7},
        -:   54:    {7, 8, 7, 9, 1, 2},
        -:   55:    {1, 1, 5, 3, 3, 5},
        -:   56:    {20, 2, 5, 2, 5, 1},
        -:   57:    {1, 9, 7, 5, 1, 7},
        -:   58:};
        -:   59:
        -:   60:float m_ill_result[MATRIX_SIZE][MATRIX_SIZE] = 
        -:   61:{
        -:   62:    {1, 0, 0, 0, 0, 0},
        -:   63:    {0, 1, 0, 0, 0, 0},
        -:   64:    {0, 0, 1, 0, 0, 0},
        -:   65:    {0, 0, 0, 1, 0, 0},
        -:   66:    {0, 0, 0, 0, 1, 0},
        -:   67:    {0, 0, 0, 0, 0, 1},
        -:   68:};
        -:   69:
        -:   70://the ill-conditioned matrix to be inverted
        -:   71:float ill_conditioned_matrix[MATRIX_SIZE][MATRIX_SIZE] = 
        -:   72:{
        -:   73:    {1, 2, 1, 1, 2, 1},
        -:   74:    {5, 33, 7, 1, 1, 3},
        -:   75:    {7, 1, 1, 4, 1, 2},
        -:   76:    {1, 1, 5, 2, 3, 7},
        -:   77:    {1, 2, 5, 50, 2, 1},
        -:   78:    {1, 20, 1, 1, 1, 2}
        -:   79:};
        -:   80:
        -:   81://creating another matrix for the ill-conditioned result
        -:   82:float ill_conditioned_inversion_result[MATRIX_SIZE][MATRIX_SIZE] = 
        -:   83:{
        -:   84:    {1, 0, 0, 0, 0, 0},
        -:   85:    {0, 1, 0, 0, 0, 0},
        -:   86:    {0, 0, 1, 0, 0, 0},
        -:   87:    {0, 0, 0, 1, 0, 0},
        -:   88:    {0, 0, 0, 0, 1, 0},
        -:   89:    {0, 0, 0, 0, 0, 1},
        -:   90:};
        -:   91:
    #####:   92:void printMatrix(float matrix[MATRIX_SIZE][MATRIX_SIZE]) {
    #####:   93:    for (int i = 0; i < MATRIX_SIZE; i++) {
    #####:   94:        for (int j = 0; j < MATRIX_SIZE; j++) {
    #####:   95:            printf("%.8f\t", matrix[i][j]);
        -:   96:        }
    #####:   97:        printf("\n");
        -:   98:    }
    #####:   99:}
        -:  100:
    #####:  101:void swapRows(float matrix[MATRIX_SIZE][MATRIX_SIZE], int row1, int row2) {
    #####:  102:    for (int i = 0; i < MATRIX_SIZE; i++) {
    #####:  103:        float temp = matrix[row1][i];
    #####:  104:        matrix[row1][i] = matrix[row2][i];
    #####:  105:        matrix[row2][i] = temp;
        -:  106:    }
    #####:  107:}
        -:  108:
    #####:  109:void scaleRow(float matrix[MATRIX_SIZE][MATRIX_SIZE], int row, float scalar) {
    #####:  110:    for (int i = 0; i < MATRIX_SIZE; i++) {
    #####:  111:        matrix[row][i] *= scalar;
        -:  112:    }
    #####:  113:}
        -:  114:
    #####:  115:void addRows(float matrix[MATRIX_SIZE][MATRIX_SIZE], int srcRow, int destRow, float scalar) {
    #####:  116:    for (int i = 0; i < MATRIX_SIZE; i++) {
    #####:  117:        matrix[destRow][i] += scalar * matrix[srcRow][i];
        -:  118:    }
    #####:  119:}
        -:  120:
    #####:  121:void invertMatrix(float matrix[MATRIX_SIZE][MATRIX_SIZE], float inverse[MATRIX_SIZE][MATRIX_SIZE]) {
        -:  122:
    #####:  123:    for (int i = 0; i < MATRIX_SIZE; i++) {
        -:  124:        // If the pivot element is zero, swap rows
    #####:  125:        float pivot = matrix[i][i];
    #####:  126:        if (pivot == 0) {
        -:  127:            int j;
    #####:  128:            for (j = i + 1; j < MATRIX_SIZE; j++) {
    #####:  129:                if (matrix[j][i] != 0) {
    #####:  130:                    swapRows(matrix, i, j);
    #####:  131:                    swapRows(inverse, i, j);
    #####:  132:                    break;
        -:  133:                }
        -:  134:            }
    #####:  135:            if (j == MATRIX_SIZE) {
    #####:  136:                printf("Matrix is not invertible\n");
    #####:  137:                return;
        -:  138:            }
        -:  139:        }
        -:  140:
        -:  141:        // Scale the pivot row
    #####:  142:        scaleRow(matrix, i, 1.0 / pivot);
    #####:  143:        scaleRow(inverse, i, 1.0 / pivot);
        -:  144:
        -:  145:        // Eliminate other rows
    #####:  146:        for (int j = 0; j < MATRIX_SIZE; j++) {
    #####:  147:            if (j != i) {
    #####:  148:                float factor = matrix[j][i];
    #####:  149:                addRows(matrix, i, j, -factor);
    #####:  150:                addRows(inverse, i, j, -factor);
        -:  151:            }
        -:  152:        }
        -:  153:    }
        -:  154:}
        -:  155:
    #####:  156:float scale_factor_calculation(float matrix[MATRIX_SIZE][MATRIX_SIZE]){
    #####:  157:    float scale_factor = 0;
    #####:  158:    float max = 0;
        -:  159:
        -:  160:    //Loop through matrix to find the maximum element
    #####:  161:    for(int i = 0; i < MATRIX_SIZE; i++){
    #####:  162:        for(int j = 0; j < MATRIX_SIZE; j++){
    #####:  163:            if (matrix[i][j] > max) max = matrix[i][j];
        -:  164:        }
        -:  165:    }
    #####:  166:    if(max > 0) scale_factor = MAX_SCALER/max;
        -:  167:
    #####:  168:    return scale_factor;
        -:  169:}
        -:  170:
    #####:  171:float scale_matrix(float inverted_matrix[MATRIX_SIZE][MATRIX_SIZE], int scale_factor){
        -:  172:    //Scale each element in the matrix
    #####:  173:    for(int i = 0; i < MATRIX_SIZE; i++){
    #####:  174:        for(int j = 0; j < MATRIX_SIZE; j++){
    #####:  175:            inverted_matrix[i][j]*=scale_factor;
        -:  176:        }
        -:  177:    }
    #####:  178:}
        -:  179:
    #####:  180:float approximate_norm(float matrix[MATRIX_SIZE][MATRIX_SIZE]){
        -:  181:    //Goal: estimate the condition number without calculating the norm
        -:  182:    //Approximate the matrix norm by find the maximum absolute row sum
        -:  183:
    #####:  184:    float norm = 0;
    #####:  185:    for(int i = 0; i < MATRIX_SIZE; i++){
    #####:  186:        float row_sum = 0;
    #####:  187:        for(int j = 0; j < MATRIX_SIZE; j++){
    #####:  188:            if(matrix[i][j] < 0){
        -:  189:                //Multiply index by -1 if negative
    #####:  190:                row_sum+=(matrix[i][j]*(-1));
        -:  191:            }else{
    #####:  192:                row_sum+=matrix[i][j];
        -:  193:            }
        -:  194:        }
    #####:  195:        if(row_sum > norm) norm = row_sum;
        -:  196:    }
    #####:  197:    return norm;
        -:  198:}
        -:  199:
    #####:  200:float compute_condition_num(float matrix[MATRIX_SIZE][MATRIX_SIZE], float inverse[MATRIX_SIZE][MATRIX_SIZE]){
        -:  201:    //Goal: estimate the condition number without calculating the norm
        -:  202:    //Approximate the matrix norm by find the maximum absolute row sum
    #####:  203:    float norm = approximate_norm(matrix);
    #####:  204:    printf("Norm is:%f\n", norm);
        -:  205:
    #####:  206:    invertMatrix(matrix, inverse);
        -:  207:
        -:  208:
    #####:  209:    float inverse_norm = approximate_norm(inverse);
    #####:  210:    printf("Inverse norm is:%f\n", inverse_norm);
        -:  211:
    #####:  212:    float condition_num = norm*inverse_norm;
        -:  213:    
    #####:  214:    return condition_num;
        -:  215:}
        -:  216:
    #####:  217:int main() {
        -:  218:
    #####:  219:    printMatrix(m_well);
    #####:  220:    float scale_factor = scale_factor_calculation(m_well);
    #####:  221:    printf("Scale factor: %f\n", scale_factor);
    #####:  222:    scale_matrix(m_well, scale_factor);
    #####:  223:    float condition_number = compute_condition_num(m_well, m_well_result);
    #####:  224:    printf("Condition Number: %.8f\n", condition_number);
    #####:  225:    printMatrix(m_well_result);
        -:  226:
    #####:  227:    printMatrix(m_ill);
    #####:  228:    float scale_factor_ill = scale_factor_calculation(m_ill);
    #####:  229:    printf("Scale factor: %f\n", scale_factor_ill);
    #####:  230:    scale_matrix(m_ill, scale_factor_ill);
    #####:  231:    float condition_number_ill = compute_condition_num(m_ill, m_ill_result);
    #####:  232:    printf("Condition Number: %.8f\n", condition_number_ill);
    #####:  233:    printMatrix(m_ill_result);
        -:  234:
    #####:  235:    return 0;
        -:  236:}
